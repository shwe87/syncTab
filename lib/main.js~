/*Mozilla sdk modules load*/
var data = require("sdk/self").data;
var tabs = require("sdk/tabs");




/*Variables*/
var tabsList = new Array();			//A list of all tabs.
var listOfBookmarks = new Array();		// A list of all bookmarks
var listOfHistory = new Array();		//A list of history

/*My modules*/
var bookmarks = require('./bookmark.js');	//Query bookmarks
var history = require('./history.js');		//Query history
var gapi = require('./gapi.js');
var xulControl = require('./xulControl.js');

/*Files we can work with*/
const TABS_FILE = 'tabs.json';
const BOOKMARKS_FILE = 'bookmarks.json';
const HISTORY_FILE = 'history.json';


/* GOOGLE DRIVE OAUTH CONSTANTS 
const CLIENT_ID = '737302378245.apps.googleusercontent.com';
const CLIENT_SECRET = 'rcWgBDcdt9PuVnrKGXz81Hf7';
const REDIRECT_URI_URN = 'urn:ietf:wg:oauth:2.0:oob';
const REDIRECT_URI_LOCAL = 'http://localhost';
const SCOPE = 'https://www.googleapis.com/auth/drive+';
var URL = 'https://accounts.google.com/o/oauth2/auth?'+'scope='+SCOPE+'https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&'+'redirect_uri=' + REDIRECT_URI_URN + '&'+ 'client_id=' + CLIENT_ID+'&'+'response_type=code';*/


/*Google drive necessary var.*/
var access_token;
var token_type;
var expires_in;
var id_token;
var refresh_token;
var resumable_sesion_uri;
var theCode;

var authenticated = false;


/*Panel settings*/
var myPanel = require("sdk/panel").Panel({
	width:800,
	height:500,
	position: {
   		right: 0
  	},
	contentScriptFile: data.url("panel-control.js"),	
	contentURL: data.url("panel.html")	//Trusted script, contentScriptFile not required
});

/*Widget settings*/
var myWidget = require("sdk/widget").Widget({
	id: "my-widget",
	label: "My Widget",
	content: "Synch",
	width: 50,
	panel: myPanel,
	//onClick: auth
});


myPanel.port.on('close', function(toClose){
	if (toClose == 'panel'){
		myPanel.hide();
	}
});


//If list tabs button is clicked
myPanel.port.on('tabsClicked',function(message){
	//The content-script lets know the add-on that the user has clicked the list button.
	//So call ths function listTabs
	tabsList = listTabs();
});


//If bookmarks button is clicked
myPanel.port.on('bookmarksClicked',function(message){
	listOfBookmarks = getBookmarks();
	myPanel.port.emit('takeBookmarks',listOfBookmarks);
});


//If get history button is clicked:
myPanel.port.on('historyClicked',function(message){
	listOfHistory = getHistory();
	myPanel.port.emit('takeHistory',listOfHistory);
});


//If clear button is clicked:
myPanel.port.on('clearAll',function(msg){
	
	myPanel.port.emit('reset','tabs');
	myPanel.port.emit('reset','bookmarks');
	myPanel.port.emit('reset','history');

});


/*
function saveData(uploadData){
	gapi.uploadFile(uploadData);
	gapi.on('saveComplete',function(uri){
		myPanel.port.emit('showMessage','UPLOADED!!');	
	});	

}


function handleResponse(response){
	authenticated = true;
	accessDatas = response[0];
	element = response[1];
	//Save the respective value of the access response.
	access_token = accessDatas.access_token;
	token_type = accessDatas.token_type;
	expires_in = accessDatas.expires_in;
	id_token = accessDatas.id_token;
	refresh_token = accessDatas.refresh_token;
	
	var dataToSave;
	if (element == 'tabs'){
		dataToSave = tabsList;
			
	}
	else if (element == 'bookmarks'){
		dataToSave = listOfBookmarks;
	}
	else{
		dataToSave = listOfHistory;
	}
		
	gapi.saveData(element, dataToSave, access_token);
	/*emit(exports, 'startComplete', [dataToSave, resumable_sesion_uri, token ]);*/
/*	gapi.on('startComplete',saveData);
	
}



//If save tabs button is clicked:
myPanel.port.on('saveTabs',function(message){
	//console.log('CLicked');
	if (!authenticated){
		gapi.auth(myPanel,'tabs');
		gapi.on('authComplete',handleResponse);
	}
	else{
	//If already authenticated then just pass the access_token
		gapi.saveData('tabs',tabsList,access_token);
		gapi.on('startComplete',saveData);
	}	
});


//If save bookmarks button is clicked:
myPanel.port.on('saveBookmarks',function(message){
	//console.log('CLicked');
	if (!authenticated){
		gapi.auth(myPanel,'bookmarks');
		gapi.on('authComplete',handleResponse);
	}
	else{
	//If already authenticated then just pass the access_token
		gapi.saveData('bookmarks',listOfBookmarks,access_token);
		gapi.on('startComplete',saveData);
	}
});

//If save history button is clicked:
myPanel.port.on('saveHistory',function(message){
	//console.log('CLicked');
	if (!authenticated){
		gapi.auth(myPanel,'history');
		gapi.on('authComplete',handleResponse);
	}
	else{
	//If already authenticated then just pass the access_token
		gapi.saveData('history',listOfHistory,access_token);
		gapi.on('startComplete',saveData);
	}	
});

function handleSavedData(data){

	var fileName = data[0];
	try{
		var fileData = JSON.parse(data[1]);
	}catch(e){
		console.log(e.toString());
		var fileData = data[1];
	}
	
	if (fileData == null){
		console.log('Data null!!!');
		myPanel.port.emit('error',fileName.split('.json')[0]);
	}
	else{
		if (fileName == 'tabs.json'){
			//console.log('GOT TABS = ' + fileData);
			myPanel.port.emit('reset','tabs');
			myPanel.port.emit('takeTabs',fileData);
			
		}
		else if (fileName == 'bookmarks.json'){
			myPanel.port.emit('reset','bookmarks');
			myPanel.port.emit('takeBookmarks',fileData);
		}
		else{
			myPanel.port.emit('reset','history');
			myPanel.port.emit('takeHistory',fileData);
		}
	}


}

function handleError(fileName){
	//console.log('ERROR!!!!');
	var file = fileName.split('.json')[0];
	
	myPanel.port.emit('error',file);
	

}


function getFileData(response){
	authenticated = true;
	var accessDatas = response[0];
	var element = response[1];
	
	
	//Save the respective value of the access response.
	
	access_token = accessDatas.access_token;
	token_type = accessDatas.token_type;
	expires_in = accessDatas.expires_in;
	id_token = accessDatas.id_token;
	refresh_token = accessDatas.refresh_token;
	
	
	gapi.getData(element, access_token);
	gapi.on('downloadComplete',handleSavedData);
	gapi.on('cannotDownload', handleError);
	//emit(exports,'downloadComplete',response.text);
	/*
	
		
	gapi.saveData(element, dataToSave, access_token);
	/*emit(exports, 'startComplete', [dataToSave, resumable_sesion_uri, token ]);*/
		
/*}





//If get saved tabs button is clicked:
myPanel.port.on('getSavedTabs',function(message){
	//console.log('CLicked');
	console.log('Get tabs clicked');
	if(!authenticated){
		gapi.auth(myPanel,'tabs');
		gapi.on('authComplete',getFileData);
	}
	else{
		gapi.getData('tabs',access_token);
		gapi.on('downloadComplete',handleSavedData);
		gapi.on('cannotDownload', handleError);
	}	
});


//If get saved bookmarks button is clicked:
myPanel.port.on('getSavedBookmarks',function(message){
	//console.log('CLicked');
	console.log('Get bookmarks clicked');
	if(!authenticated){
		gapi.auth(myPanel,'bookmarks');
		gapi.on('authComplete',getFileData);
	}
	else{
		gapi.getData('bookmarks',access_token);
		gapi.on('downloadComplete',handleSavedData);
		gapi.on('cannotDownload', handleError);
	}
});

//If get saved history button is clicked:
myPanel.port.on('getSavedHistory',function(message){
	//console.log('CLicked');
	console.log('Get history clicked');
	if(!authenticated){
		gapi.auth(myPanel,'history');
		gapi.on('authComplete',getFileData);
	}
	else{
		gapi.getData('history',access_token);
		gapi.on('downloadComplete',handleSavedData);
		gapi.on('cannotDownload', handleError);
	}	
});


*/



//Get all the open tabs information, save it locally and send it to the content-script.
function listTabs() {
	var listOfTabs = new Array();
	
	//Clear everything before doing anything
	myPanel.port.emit('reset','tabs');
	
	var numberOfTabs = tabs.length;
	var countTabs = 0;
	//For each tab handle the tab's info:
	for each (var tab in tabs){
		//Create object with all the info as an object which will be a serialazable JSON message
		var info = new Object();
		info.id = tab.id;
		info.title = tab.title;
		info.url = tab.url;		
		listOfTabs.push(info);		
		//A tab's worker, used to get information and work on the tab.
		worker = tab.attach({
    			contentScriptFile: data.url("give-tabs-cookies.js")
   		});
   		// Ask the worker's content-script for tab's cookies 
    		worker.port.emit('giveCookies',tab.id);
    		worker.port.on('takeCookies',function(cookiesInfo){
    			countTabs++;
    			//Ths last element of the cookie's content-script is the tabs id.
    			var thisTabsId = cookiesInfo.pop();
    			//Lets search for the tab with thisTabsId in the listOfTabs.
    			var pos = listOfTabs.map(function(e) { 
    				return e.id; 
    			}).indexOf(thisTabsId);
    			
    			//Once we have got the position of the tab with the id, lets save its cookies:
    			listOfTabs[pos].cookies = cookiesInfo;
    			 			
			/*If we have saved information of all the tabs then send it to the content-script*/
			if(countTabs == numberOfTabs){
				myPanel.port.emit('takeTabs',listOfTabs);
			}
		}); 
	}
	return listOfTabs;
}


//Get all the bookmarks
function getBookmarks(){
	myPanel.port.emit('reset','bookmarks');	
	var folderIds = bookmarks.getFoldersId();
	var allBookmarks = new Array();
	for each (var id in folderIds){
		var uri = new Array();		
		var folders = new Array();
		var b = {};
		b.main = bookmarks.nameFolder(id);
		var children = bookmarks.getFoldersChildren(id);
		// children will be an array of all the children of the folder:
		for (j=0;j<children.length;j++){
			var ifURI = bookmarks.ifUri(children[j]);
			var ifSubFolder = bookmarks.ifSubFolder(children[j]);
			if (ifURI == true){
				uri.push(children[j].title);			
			}
			else if (ifSubFolder == true){
				var folder = {};
				folder.title = children[j].title;
				var sub = new Array();
				var allChildren = bookmarks.getSubFoldersBookmarks(children[j]);
				for(k=0;k<allChildren.length;k++){
					sub.push(allChildren[k].title);
				}
				folder.sub = sub.slice(0);
				folders.push(folder);
			}	
		}
		b.uri = uri.slice(0);
		b.folders = folders.slice(0);
		allBookmarks.push(b);
	}
	return allBookmarks;

}


function getHistory(){
	myPanel.port.emit('reset','history');
	var historyList = history.queryHistory();
	//console.log(listOfHistory.title);
	return historyList;
}



/*Handle the auth reply*/
function handleAuth(authDatas){
	/*authDatas = [response.json, callersData]
	**callersData = [whoCalled, datas...]
	*/
	authenticated = true;
	var accessDatas = authDatas[0];
	var callersData = authDatas[1];
	
	var whoCalled = callersData[0];
	
	//Save the respective value of the access response.
	access_token = accessDatas.access_token;
	token_type = accessDatas.token_type;
	expires_in = accessDatas.expires_in;
	id_token = accessDatas.id_token;
	refresh_token = accessDatas.refresh_token;
	
	var currentTab = tabs.activeTab;
	console.log("Active tab " + currentTab.title);
	var currentTabWorker = currentTab.attach({
		contentScriptFile: data.url('message.js')
	});
	currentTabWorker.port.emit('authenticated','Signed in correctly!');
	
	console.log("EXPIRES IN " + expires_in);
	
	if (whoCalled == 'searchFile'){
		//Continue to search File
		//callersData = ['searchFile' , title, dataToSave, elementToSave]
		var title = callersData[1];
		var dataToSave = callersData[2];
		var elementToSave = callersData[3];
		gapi.searchFile(title, dataToSave, access_token, elementToSave);
	}
	/*if(whoCalled == 'OpenTab'){
		tabs.open({
  			url: data.url('GoogleDriveShare.html'),
  			inNewWindow: true
    		});
		
	}*/
	else if (whoCalled == 'downloadData'){
		//callersData = ['downloadData', fileName, downloadURL]
		var title = callersData[1];
		var downloadURL = callersData[2];
		gapi.downloadData(title, downloadURL, access_token);	
	}


}

/*If unauthorized message is received:*/
function handleUnAuth(functionDatas){
	//functionDatas = ['searchFile', title, dataToSave]
	gapi.auth(functionDatas);


}

//Function to save the given tabs
function saveTabs(tabsToSave){
	//console.log("Tab to save " + clickedTab.title);
	//See if authenticated:
	if (!authenticated){
		//gapi.auth(TABS);
		console.log("Not authenticated");
	}
	/*
	var a = {"test":"test"};
	var clone_of_a = JSON.parse(JSON.stringify(a));
	*/
	/*var tabToSave = tabsToSave[0];
	var dataToSave = {'id':tabToSave.id,'title':tabToSave.title,'url':tabToSave.url};
	gapi.searchFile(TABS_FILE, dataToSave, access_token, tabToSave);*/
	var dataToSave = new Array();
	for each (var tabToSave in tabsToSave){
		var newTab = {'id':tabToSave.id,'title':tabToSave.title,'url':tabToSave.url};
		dataToSave.push(newTab);
		
	}
	console.log("saveTabs = " + JSON.stringify(dataToSave));
	gapi.searchFile(TABS_FILE,dataToSave,access_token,tabsToSave);
}


//Handle the result of the search file function:
function handleSearchFile(fileData){
	/*fileData = [exists, title, dataToSave, token, dLoadURL, fileId, elementToSave]*/
	var exists = fileData[0];
	var fileName = fileData[1];
	var dataToSave = fileData[2];
		
	if (exists){
		//If the file exists then check if this tab is already saved		
		console.log("handleSearchFile : File " + fileName + " exists!");
		//Then download the file:
		gapi.downloadData(fileData, 'rewrite');
		
			
	}
	else{
		//If the file doesn't exist then we have to create the file
		console.log("handleSearchFile: File " + fileName + " doesn't exists! " + expires_in);
		/*
		var anArray = ['Hola','Yo','Soy','Shweta'];
	var anObject = {'title':'new','author':'nobody','array':anArray};
        var j = [];
        j.push(anObject);
        var objects = {'obj':j}
		*/
		//var anArray = [];
		//anArray.concat(dataToSave);
		console.log("FILE = " + fileName);
		//var key = Object.keys();
		var object = {};
		if (fileName == TABS_FILE){
			object = {'tabs':dataToSave};
		}
		else if (fileName == BOOKMARKS_FILE){
			object = {'bookmarks':dataToSave};
		}
		else if (fileName == HISTORY_FILE){
			object = {'history':dataToSave};
		}
		fileData[2] = object;
		console.log("Para guardar = " + JSON.stringify(fileData[2]));
		gapi.startUpload(fileData);			
	}
}


//Handle the save has been completed function:
function handleSaveCompleted(savedData){
	//savdData = [fileData, resumable_sesion]
	//fileData = [exists, title, dataToSave, token, dLoadURL, fileId, elementToSave]
	var fileData = savedData[0];
	var title = fileData[1];
	/*var elementsToSave = fileData[6];
	var length = 0;
	try{
		length = elementsToSave.length;
	}catch(e){
		console.log("ERROR " + e.toString());
		length = 1;
	}*/
	if (title == TABS_FILE){
		//if (length == 1){
		var elementToSave = tabs.activeTab;
		var elementWorker = elementToSave.attach({
			contentScriptFile: data.url('messages.js')				
		});
		elementWorker.port.emit('savedCompletely','Correctly saved!');
		console.log("Save completed!!!!");
		//}
	}

}

//Handle when download is completed!
function handleDownloadCompleted(downloadData){
	//downloadData = [fileName, response.text]
	//fileData = [exists, title, dataToSave, token, dLoadURL, fileId, elementToSave]
	var fileData = downloadData[0];
	var actionAfterDownload = downloadData[1];
	//var data = downloadData[2];
	//The data sometimes is downlaoded as json and sometimes as string
	var downloadedData = {};
	try{
		//If it is downloaded as string:
		downloadedData = JSON.parse(downloadData[2]);
	}catch(e){
		//Otherwise it's downloaded as json
		console.log("ERROR = " + e.toString());
		downloadedData = downloadData[2];
	}
	console.log("DOWNLOADED DATA = " + JSON.stringify(downloadedData));
	if (actionAfterDownload == 'rewrite'){

		console.log("Have to rewrite!!!!");
		var title = fileData[1];
		var dataToSave = fileData[2];
		
		
		
		//Lets search for the tab with thisTabsId in the listOfTabs.
    		/*	var pos = listOfTabs.map(function(e) { 
    				return e.id; 
    			}).indexOf(thisTabsId);
    			
    			//Once we have got the position of the tab with the id, lets save its cookies:
    			listOfTabs[pos].cookies = cookiesInfo;
    			 */
    		//console.log("Keys " + Object.keys(downloadedData));
    		var key = Object.keys(downloadedData);
    		//console.log("Using key = " + downloadedData[key]);
		//If it is update file then have to update the save data:
		var arrayOfObjects = new Array();	//New array containing the elements' array
		arrayOfObjects = downloadedData[key].slice(0);
		/*if (title == TABS_FILE){
			arrayOfObjects = downloadedData.tabs.slice(0);   //Contains the tabs' array						
		}
		else if (title == BOOKMARKS_FILE){
			arrayOfObjects = downloadedData.bookmarks.slice(0); //Contains the bookmarks' array	
		}
		else{
			arrayOfObjects = downlaodedData.history.slice(0); //Contains the histories' array
		}*/
		console.log("Array Of Objects = " + JSON.stringify(arrayOfObjects));
		console.log("DATA TO SAVE = " + JSON.stringify(dataToSave));
		var upload = false;
		var alreadySaved = new Array();
		//Lets see if the data we are going to save was already saved before:
		for each (var oneData in dataToSave){
			console.log(oneData.url);
			var pos = arrayOfObjects.map(function(e) { 
					console.log("MAP = " + e.url);
    					return e.url; 
    			}).indexOf(oneData.url);
    			
    			
    			if (pos == -1){//Doesn't exist
    				console.log("\r\n\r\n\r\n"+oneData.url + " doesn't exist\r\n\r\n\r\n");
				downloadedData[key].push(oneData);
				upload = true;
					
			}
			else{
				console.log("This tab is already saved " + oneData.title);
				alreadySaved.push(oneData.title);			
			}
    		}
    		if (upload){
	    		//Now dataToSave will be:
			fileData[2] = downloadedData;
			gapi.startUpload(fileData);
		}
		if ((alreadySaved.length > 0) && (title == TABS_FILE)){
			var elementToSave = tabs.activeTab;
			//console.log( oneData.title + " IS ALREADY SAVED!!!!!");
			var elementWorker = elementToSave.attach({
				contentScriptFile: data.url('messages.js')
							
			});
			elementWorker.port.emit('alreadySaved',alreadySaved);
		}
    		
    		
		
		
	
	}

}






exports.main = function(options, callbacks) {
    //Add the tab context menu:
    xulControl.addTabMenu();
    //Add the save all tabs menu item in the tool menu
    xulControl.addSaveAllTabsMenu();
     
    /*Listen for the events*/
    //The module xulControl informs us when the user right clicks the tab. 
    xulControl.on('tabContextClicked',saveTabs);
    //The module xulControl informs us when the save all menu item is clicked.
    xulControl.on('saveAllTabsClicked',saveTabs);
    
    //When the user is unauthorized:
    gapi.on('Unauthorized',handleUnAuth);
    //When the authentication process is completed:
    gapi.on('authComplete',handleAuth);
    //Lets search for the file.
    gapi.on('searchFile',handleSearchFile);
    //When the upload of a file has been completed:
    gapi.on('saveComplete',handleSaveCompleted);
    //When the download has been completed:
    gapi.on('downloadComplete',handleDownloadCompleted);
    

    
};







