/*Mozilla sdk modules load*/
var data = require("sdk/self").data;
var tabs = require("sdk/tabs");
var pageMod = require("sdk/page-mod");

const TABS_FILE = 'tabs.json';
const BOOKMARKS_FILE = 'bookmarks.json';
const HISTORY_FILE = 'history.json';

/*Actions that can be realized*/
const REWRITE = 'rewrite';
const SHOW = 'show';


/*Google drive necessary var.*/
var access_token;
var token_type;
var expires_in;
var id_token;
var refresh_token;
var resumable_sesion_uri;
var theCode;

var authenticated = false;




/*My modules*/
//var bookmarks = require('./bookmark.js');	//Query bookmarks
//var history = require('./history.js');		//Query history
var gapi = require('./gapi.js');
var UIControl = require('./UIControl.js');






var openMenuTabWorker;


/*Handle the auth reply*/
function handleAuth(authDatas){
        /*authDatas = [response.json, callersData]
        **callersData = [whoCalled, datas...]
        */
        authenticated = true;
        var accessDatas = authDatas[0];
        var callersData = authDatas[1];
        
        var whoCalled = callersData[0];
        
        //Save the respective value of the access response.
        access_token = accessDatas.access_token;
        token_type = accessDatas.token_type;
        expires_in = accessDatas.expires_in;
        id_token = accessDatas.id_token;
        refresh_token = accessDatas.refresh_token;
        
        UIControl.showToast('Authenticated!');
        /*var currentTab = tabs.activeTab;
        //console.log("Active tab " + currentTab.title);
        var currentTabWorker = currentTab.attach({
                contentScriptFile: data.url('messages.js')
        });
        currentTabWorker.port.emit('authenticated','Signed in correctly!');*/
        
        //console.log("EXPIRES IN " + expires_in);
       
        if (whoCalled == 'searchFile'){
                //Continue to search File
                //callersData = ['searchFile' , title, dataToSave]
                var title = callersData[1];
                var dataToSave = callersData[2];
                //var elementToSave = callersData[3];
                gapi.searchFile(title, dataToSave, access_token);
        }
        /*if(whoCalled == 'OpenTab'){
                tabs.open({
                        url: data.url('GoogleDriveShare.html'),
                        inNewWindow: true
                });
                
        }*/
        else if (whoCalled == 'downloadData'){
                //callersData = ['downloadData', fileName, downloadURL]
                var title = callersData[1];
                var downloadURL = callersData[2];
                gapi.downloadData(title, downloadURL, access_token);        
        }


}

/*If unauthorized message is received:*/
function handleUnAuth(functionDatas){
        //functionDatas = ['searchFile', title, dataToSave]
        gapi.auth(functionDatas);


}

//Function to save the given tabs
function saveTabs(tabsToSave){
        ////console.log("Tab to save " + clickedTab.title);
        //See if authenticated:
        
        /*
        var a = {"test":"test"};
        var clone_of_a = JSON.parse(JSON.stringify(a));
        */
        /*var tabToSave = tabsToSave[0];
        var dataToSave = {'id':tabToSave.id,'title':tabToSave.title,'url':tabToSave.url};
        gapi.searchFile(TABS_FILE, dataToSave, access_token, tabToSave);*/
        //Get the favicon icon:
        
        var dataToSave = new Array();
        
        for each (var tabToSave in tabsToSave){                
                
                var newTab = {'id':tabToSave.id,'title':tabToSave.title,'url':tabToSave.url};
                dataToSave.push(newTab);        
        }
        //console.log("saveTabs = " + JSON.stringify(dataToSave));
        gapi.searchFile(TABS_FILE,dataToSave,access_token);
}


//Handle the result of the search file function:
function handleSearchFile(fileData){
        /*fileData = [exists, title, dataToSave, token, dLoadURL, fileId]*/
        var exists = fileData[0];
        var fileName = fileData[1];
        var dataToSave = fileData[2];
               
        UIControl.showToast('Search File completed');    
        if (exists){
                //console.log("handleSearchFile : File " + fileName + " exists!");
                UIControl.showToast('File Exists'); 
                if (dataToSave != null){                
                        //Download the file:
                        gapi.downloadData(fileData, REWRITE);
                }
                else{
                        //Only for download:
                        //console.log ("Only for download");
                        UIControl.showToast('SHOW FILE!');
                        gapi.downloadData(fileData, SHOW);
                }
                
                        
        }
        else{
                //If the file doesn't exist then we have to create the file
                //console.log("handleSearchFile: File " + fileName + " doesn't exists! " + expires_in);
                /*
                var anArray = ['Hola','Yo','Soy','Shweta'];
        var anObject = {'title':'new','author':'nobody','array':anArray};
var j = [];
j.push(anObject);
var objects = {'obj':j}
                */
                //var anArray = [];
                //anArray.concat(dataToSave);
                UIControl.showToast('File DOESNT Exists'); 
                if (dataToSave != null){
                        //console.log("FILE = " + fileName);
                        //var key = Object.keys();
                        var object = {};
                        if (fileName == TABS_FILE){
                                object = {'tabs':dataToSave};
                        }
                        else if (fileName == BOOKMARKS_FILE){
                                object = {'bookmarks':dataToSave};
                        }
                        else if (fileName == HISTORY_FILE){
                                object = {'history':dataToSave};
                        }
                        fileData[2] = object;
                        //console.log("Para guardar = " + JSON.stringify(fileData[2]));
                        gapi.startUpload(fileData);
                }
                else{
                	UIControl.showToast('Nothing SAVED!!!');
                        //console.log("Nothing saved!!!");
                        openMenuTabWorker.port.emit('showtabs',function(elementsToShow)
                        
                }                        
        }
}


//Handle the save has been completed function:
function handleSaveCompleted(savedData){
        //savdData = [fileData, resumable_sesion]
        //fileData = [exists, title, dataToSave, token, dLoadURL, fileId]
        var fileData = savedData[0];
        var title = fileData[1];
        /*var elementsToSave = fileData[6];
        var length = 0;
        try{
                length = elementsToSave.length;
        }catch(e){
                //console.log("ERROR " + e.toString());
                length = 1;
        }*/
        
        
        //if (title == TABS_FILE){
                //if (length == 1){
                /*var elementToSave = tabs.activeTab;
                var elementWorker = elementToSave.attach({
                        contentScriptFile: data.url('messages.js')                                
                });
                elementWorker.port.emit('savedCompletely','Correctly saved!');*/
                //console.log("Save completed!!!!");
                //}
        //}

}

//Handle when download is completed!
function handleDownloadCompleted(downloadData){
        //downloadData = [fileName, response.text]
        //fileData = [exists, title, dataToSave, token, dLoadURL, fileId]
        var fileData = downloadData[0];
        var actionAfterDownload = downloadData[1];
        //var data = downloadData[2];
        //The data sometimes is downlaoded as json and sometimes as string
        var downloadedData = {};
        var title = fileData[1];
        try{
                //If it is downloaded as string:
                downloadedData = JSON.parse(downloadData[2]);
        }catch(e){
                //Otherwise it's downloaded as json
                //console.log("ERROR = " + e.toString());
                downloadedData = downloadData[2];
        }
        //console.log("DOWNLOADED DATA = " + JSON.stringify(downloadedData));
        if (actionAfterDownload == REWRITE){

                //console.log("Have to rewrite!!!!");
                var dataToSave = fileData[2];
                
                
                
                //Lets search for the tab with thisTabsId in the listOfTabs.
                    /*        var pos = listOfTabs.map(function(e) {
                                return e.id;
                        }).indexOf(thisTabsId);
                        
                        //Once we have got the position of the tab with the id, lets save its cookies:
                        listOfTabs[pos].cookies = cookiesInfo;
                         */
                    ////console.log("Keys " + Object.keys(downloadedData));
                    var key = Object.keys(downloadedData);
                    ////console.log("Using key = " + downloadedData[key]);
                //If it is update file then have to update the save data:
                var arrayOfObjects = new Array();        //New array containing the elements' array
                arrayOfObjects = downloadedData[key].slice(0);
                /*if (title == TABS_FILE){
                        arrayOfObjects = downloadedData.tabs.slice(0); //Contains the tabs' array                                                
                }
                else if (title == BOOKMARKS_FILE){
                        arrayOfObjects = downloadedData.bookmarks.slice(0); //Contains the bookmarks' array        
                }
                else{
                        arrayOfObjects = downlaodedData.history.slice(0); //Contains the histories' array
                }*/
                //console.log("Array Of Objects = " + JSON.stringify(arrayOfObjects));
                //console.log("DATA TO SAVE = " + JSON.stringify(dataToSave));
                var upload = false;
                var alreadySaved = new Array();
                //Lets see if the data we are going to save was already saved before:
                for each (var oneData in dataToSave){
                        //console.log(oneData.url);
                        var pos = arrayOfObjects.map(function(e) {
                                        //console.log("MAP = " + e.url);
                                            return e.url;
                            }).indexOf(oneData.url);
                            
                            
                            if (pos == -1){//Doesn't exist
                                    //console.log("\r\n\r\n\r\n"+oneData.url + " doesn't exist\r\n\r\n\r\n");
                                downloadedData[key].push(oneData);
                                upload = true;
                                        
                        }
                        else{
                                //console.log("This tab is already saved " + oneData.title);
                                alreadySaved.push(oneData.title);                        
                        }
                    }
                    if (upload){
                         //Now dataToSave will be:
                        fileData[2] = downloadedData;
                        gapi.startUpload(fileData);
                }
                if ((alreadySaved.length > 0) && (title == TABS_FILE)){
                        /*var elementToSave = tabs.activeTab;
                        ////console.log( oneData.title + " IS ALREADY SAVED!!!!!");
                        var elementWorker = elementToSave.attach({
                                contentScriptFile: data.url('messages.js')
                                                        
                        });
                        elementWorker.port.emit('alreadySaved',alreadySaved);*/
                        
                }
                    
        }
        else if(actionAfterDownload == SHOW){
                try{
                	
                        var toShow = title.split('.json');
                        //console.log("AFTER SPLIT = " + toShow);
                        toShow = toShow[0];
                        //console.log("TO SHOW is = " + toShow);
                        toShow = SHOW+toShow;
                        
                        openMenuTabWorker.port.emit(toShow,downloadedData);                
                }catch(e){
                        //console.log("ERROR!");
                }
        
        }

}

function listSavedTabs(){
        try{
        	UIControl.showToast('LIST SAVED TABS');
                ////console.log('listSavedTabs: Sending getTableReady');
                openMenuTabWorker.port.emit('getTableReady','tabs');
                ////console.log('listSavedTabs: gapi.getData');
                gapi.getData(TABS_FILE, access_token);
        }catch(e){
                ////console.log('ERROR!!');
        }
        
}

//Open the tab with the menu:
function openMenu(aWindow){
	tabs.open({
		url: data.url('myPage.html')
	});

	//aWindow.alert("HELLO!");
	
	pageMod.PageMod({
		include: data.url('myPage.html'),
		contentStyleFile: data.url('myPageStyle.css'),
		contentScriptWhen: 'ready',
		contentScriptFile: data.url('myPageScript.js'),
		onAttach: function onAttach(worker) {
			openMenuTabWorker = worker;
			////console.log(openMenuTabWorker.tab.title);
			openMenuTabWorker.port.emit('start','Bookmarks');
			openMenuTabWorker.port.on('cellClicked',function(clickedElement){	
				var nodeName = clickedElement.node;
				var nodeId = clickedElement.id;
				////console.log('cellClicked received = ' + clickedElement.node + ','+clickedElement.id);
				if (nodeId == 'tabsCell'){
					////console.log('\r\n\r\n tabsCell');
					////console.log('Here nodeName = '+nodeName);
					////console.log('Here nodeId = '+nodeId);
					//List the saved tabs:
					listSavedTabs();
					//aWindow.alert(' tabsCell');
					
				}
				else if (nodeName == 'Bookmarks'){
					if (nodeId == 'bookmarksCell'){
						////console.log('****bookmarksCell****');
						////console.log('Send initHiddenRow');
						openMenuTabWorker.port.emit('initHiddenRow');
					}
					////console.log('\r\n\r\n Bookmarks');
					////console.log('Here nodeName = '+nodeName);
					////console.log('Here nodeId = '+nodeId);
					////console.log('Calling getAllBookmarks()');
					//getAllHistory(aWindow);
					//aWindow.alert(' Bookmarks');
					
				}
				else if (nodeName == 'History'){
					if (nodeId == 'historyCell'){
						////console.log('****historyCell****');
						////console.log('Send initHiddenRow');
						//openMenuTabWorker.port.emit('initHiddenRow');
					}
					////console.log('\r\n\r\n History');
					////console.log('Here nodeName = '+nodeName);
					////console.log('Here nodeId = '+nodeId);
					////console.log('Calling getAllHistory()');
					//getAllHistory();
					aWindow.alert(' History');
				}
				else if (nodeName == 'Saved Bookmarks'){
					////console.log('\r\n\r\n *********Saved Bookmarks');
					////console.log('Here nodeName = '+nodeName);
					////console.log('Here nodeId = '+nodeId);
					////console.log("SAVED BOOKMARKS!");
					//listSavedBookmarks();
					aWindow.alert('Saved Bookmarks');
				}
				else if (nodeName == 'Saved History'){
					////console.log(' ***********Saved History');
					////console.log('Here nodeName = '+nodeName);
					////console.log('Here nodeId = '+nodeId);
					////console.log("SAVED HISTORY");
					//listSavedHistory();
					aWindow.alert('Saved History');
				}
				
				
			});
			//openMenuWorker.port.emit('msg','Hola');
	  	}
	});



}






exports.main = function(options, callbacks) {	
	UIControl.startup();
	UIControl.on('menuClicked',openMenu);
	
	//When the user is unauthorized:
	gapi.on('Unauthorized',handleUnAuth);
	//When the authentication process is completed:
	gapi.on('authComplete',handleAuth);
	//Lets search for the file.
	gapi.on('searchFile',handleSearchFile);
	//When the upload of a file has been completed:
	gapi.on('saveComplete',handleSaveCompleted);
	//When the download has been completed:
	gapi.on('downloadComplete',handleDownloadCompleted);
  	
  	
}


    
    
    
    

    










